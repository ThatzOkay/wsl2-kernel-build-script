#!/usr/bin/env bash
# shellcheck disable=SC2162,SC2317

##  GitHub Script: https://github.com/slyfox1186/wsl2-kernel-build-script/blob/main/build-kernel
##  Purpose: Build Official WSL2 Kernels
##  Updated: 03.12.24
##  Script version: 2.8

clear

if [ "${EUID}" -ne '0' ]; then
    printf "%s\n\n" 'You must run this script with root/sudo.'
    exit 1
fi

# Define the program name, an output directory, and error log file
program_name='wsl2-kernel'
script_dir="$PWD"
cwd="/tmp/$program_name-build-script"
error_log="/tmp/error.log"

# Create and change to the build directory
mkdir -p "$cwd"
cd "$cwd" || exit 1

# Set compiler optimizations
CC='gcc'
CXX='g++'
CFLAGS='-g -O3 -march=native'
CXXFLAGS="$CFLAGS"

export CC CXX CFLAGS CXXFLAGS

install_required_packages() {
    local missing_packages pkg packages

    pkgs=(
             aria2 bc bison build-essential cmake curl debootstrap dwarves flex g++
             g++-s390x-linux-gnu gcc gcc-s390x-linux-gnu gdb-multiarch git libcap-dev
             libelf-dev libelf-dev libncurses-dev libncurses5 libncursesw5 libncursesw5-dev
             libssl-dev make pkg-config python3 qemu-system-misc qemu-utils rsync wget
    )

    # Initialize an empty string for missing packages
    missing_packages=""

    # Loop through the array
    for pkg in "${pkgs[@]}"
    do
        # Check if the package is installed using dpkg-query
        if ! dpkg-query -W -f='${Status}' "$pkg" 2>/dev/null | grep -q "ok installed"; then
            # If not installed, add it to the missing packages list
            missing_packages+="$pkg "
        fi
    done

    # Check if there are any missing packages
    if [ -n "$missing_packages" ]; then
        # Install missing packages
        printf "\n%s\n\n" "Installing missing packages: $missing_packages"
        sudo apt -y install $missing_packages
    else
        printf "%s\n\n" "All packages are already installed."
    fi
}

download_file() {
    local url=$1
    local output_file=$2

    if [ -s "$output_file" ]; then
        echo "File $output_file already exists and is not empty. Skipping download."
        return 0
    fi

    if command -v wget &> /dev/null; then
        echo 'Downloading with wget...'
        wget --show-progress -cqO "$output_file" "$url"
    else
        echo 'wget is not installed. Please install wget.'
        exit 1
    fi
}

get_latest_release_version() {
    local version_type=$1
    local url="https://github.com/microsoft/WSL2-Linux-Kernel/tags/"
    local pattern="linux-msft-wsl-$version_type\\.[0-9]+\\.[0-9]+\\.[0-9]+"

    curl -s "$url" | grep -oP "$pattern" | head -1
}

# Function to build the kernel without a progress bar
build_kernel_without_progress() {
    printf "%s\n%s\n" \
       'Installing the WSL2 Kernel' \
       '========================================='
    if ! echo 'yes' | make "-j$(nproc --all)" KCONFIG_CONFIG='Microsoft/config-wsl' 2>>"$error_log"; then
        printf "%s\n" "Build process terminated with errors. Please check the error log below:"
        cat "$error_log"
        return 1
    fi
    return 0
}

install_kernel() {
    clear
    printf "%s\n\n" "Successfully downloaded the source code file \"$latest_release_tag\""
    install_required_packages
    version=$(get_latest_release_version "$version_type")
    if [ -z "$version" ]; then
        printf "%s\n\n" 'Failed to find the latest version. Exiting.'
        exit 1
    fi

    tar_file="/tmp/$program_name-$version.tar.gz"
    download_url="https://github.com/microsoft/WSL2-Linux-Kernel/archive/refs/tags/$version.tar.gz"

    # Check if the downloaded file already exists
    if [ -f "$tar_file" ]; then
        printf "%s\n\n" "Using the existing downloaded file: $tar_file"
    else
        download_file "$download_url" "$tar_file"
    fi

    extract_dir="/tmp/$program_name-$version"
    [ -d "$extract_dir" ] && rm -rf "$extract_dir"

    mkdir -p "$extract_dir"
    if ! tar -zxf "$tar_file" -C "$extract_dir" --strip-components 1; then
        printf "%s\n\n" 'Failed to extract the archive. Exiting.'
        exit 1
    fi

    cd "$extract_dir" || exit 1
    printf "%s\n\n" 'Building the kernel...'
    if ! build_kernel_without_progress; then
        rm -rf "$extract_dir"
        printf "%s\n" "Error log:"
        cat "$error_log"
        return 1
    fi

    # Check for vmlinux file and move it to $PWD
    find_vmlinux="$(find $PWD -type f -name 'vmlinux' | head -n1)"
    if [ -f "$find_vmlinux" ]; then
        mv "$find_vmlinux" "$script_dir/vmlinux"
        printf "%s\n\n" 'Kernel build successful. vmlinux moved to the script directory.'

        read -p "Do you want to delete the build directory? (y/n): " user_choice
        if [ "$user_choice" = "y" ]; then
            rm -fr "$cwd"
            printf "%s\n\n" 'Build directory cleaned up.'
        else
            printf "%s\n\n" 'Build directory retained as per user choice.'
        fi
    else
        printf "%s\n" 'Error: vmlinux file not found. Please check the build process.'
        return 1
    fi
}

# Main script execution
while true; do
    printf "%s\n" "Choose the WSL2 kernel version to download and install:"
    printf "%s\n" "1. Linux series 6 kernel"
    printf "%s\n" "2. Linux series 5 kernel"
    printf "%s\n" "3. Exit"
    read -p "Enter your choice (1-3): " choice

    case $choice in
        1)
            version_type="6"
            break
            ;;
        2)
            version_type="5"
            break
            ;;
        3)
            printf "%s\n" "Exiting the script."
            exit 0
            ;;
        *)
            printf "%s\n" "Invalid choice. Please try again."
            ;;
    esac
done

get_latest_release_version "$version_type"
if ! install_kernel; then
    printf "%s\n" "Kernel build failed. Please check the error log above for more information."
fi

#!/usr/bin/env bash
# shellcheck disable=SC2162,SC2317

##  GitHub Script: https://github.com/slyfox1186/wsl2-kernel-build-script/blob/main/build-kernel
##  Purpose: Build Official WSL2 Kernels
##  Updated: 01.09.24
##  Script version: 2.5

clear

if [ "${EUID}" -eq '0' ]; then
    printf "%s\n\n" 'You must run this script WITHOUT root/sudo.'
    exit 1
fi

# Define the program name, an output directory, and error log file
program_name='wsl2-kernel'
script_dir="$PWD"
cwd="$script_dir/$program_name-build-script"
error_log="$script_dir/error.log"

# Create and change to the build directory
mkdir -p "$cwd"
cd "$cwd" || exit 1

# Set compiler optimizations
CC='gcc'
CXX='g++'
CFLAGS='-g -O3 -march=native'
CXXFLAGS="$CFLAGS"

export CC CXX CFLAGS CXXFLAGS

install_required_packages()
{
    local missing_packages pkg packages

    packages=(
             aria2 bc bison build-essential cmake curl debootstrap dwarves flex g++
             g++-s390x-linux-gnu gcc gcc-s390x-linux-gnu gdb-multiarch git libcap-dev
             libelf-dev libelf-dev libncurses-dev libncurses5 libncursesw5 libncursesw5-dev
             libssl-dev make pkg-config python3 qemu-system-misc qemu-utils rsync wget
    )

    # Initialize an empty string for missing packages
    missing_packages=""

    # Loop through the array
    for pkg in "${pkgs[@]}"
    do
        # Check if the package is installed using dpkg-query
        if ! dpkg-query -W -f='${Status}' "$pkg" 2>/dev/null | grep -q "ok installed"; then
            # If not installed, add it to the missing packages list
            missing_packages+="$pkg "
        fi
    done

    # Check if there are any missing packages
    if [ -n "$missing_packages" ]; then
        # Install missing packages
        printf "\n%s\n\n" "Installing missing packages: $missing_packages"
        sudo apt -y install $missing_packages
    else
        printf "%s\n\n" "All packages are already installed."
    fi
}

download_file()
{
    local url=$1
    local output_file=$2

    if [ -s "$output_file" ]; then
        echo "File $output_file already exists and is not empty. Skipping download."
        return 0
    fi

    if command -v aria2c &> /dev/null; then
        echo 'Downloading with aria2c...'
        aria2c -x 16 -s 16 -o "$output_file" "$url"
    elif command -v wget &> /dev/null; then
        echo 'Downloading with wget...'
        wget --show-progress -cqO "$output_file" "$url"
    elif command -v curl &> /dev/null; then
        echo 'Downloading with curl...'
        curl -L "$url" -o "$output_file"
    else
        echo 'No suitable download tool found. Please install aria2c, wget, or curl.'
        exit 1
    fi
}

get_latest_release_version()
{
    latest_release_tag=$(curl -s 'https://github.com/microsoft/WSL2-Linux-Kernel/tags' | grep -oP 'href="/microsoft/WSL2-Linux-Kernel/releases/tag/\K[^"]+' | head -1)
    echo "$latest_release_tag"
}

# Function to draw the progress bar
draw_progress_bar()
{
    local progress=$1
    local total=$2
    local filled=$((progress * 20 / total))
    local empty=$((20 - filled))
    printf "\r["
    printf "%0.s#" $(seq 1 $filled)
    printf "%0.s-" $(seq 1 $empty)
    printf "] %d%% (%d/%d)" $((progress * 100 / total)) $progress $total
}

# Function to build the kernel with a progress bar
build_kernel_with_progress()
{
    local total_steps=$(grep -c '^' Microsoft/config-wsl) # Estimate total steps
    local current_step=0

    # Start building the kernel
    printf "%s\n%s\n" \
        'Installing the WSL2 Kernel' \
        '========================================='
    yes '' | make "-j$(nproc --all)" KCONFIG_CONFIG='Microsoft/config-wsl' 2>>"$error_log" | while read -r line; do
        ((current_step++))
        draw_progress_bar $current_step $total_steps
    done
    printf "\n"

    # Check if build was successful
    if [ $? -ne 0 ]; then
        printf "%s\n" "Build process terminated with errors. Please check the error log at $error_log."
        return 1
    fi
    return 0
}
install_kernel()
{
    clear
    printf "%s\n\n" "Successfully downloaded the source code file \"$latest_release_tag\""
    install_required_packages
    version=$(get_latest_release_version)
    if [ -z "$version" ]; then
        printf "%s\n\n" 'Failed to find the latest version. Exiting.'
        exit 1
    fi

    tar_file="$program_name-$version.tar.gz"
    download_url="https://github.com/microsoft/WSL2-Linux-Kernel/archive/refs/tags/$version.tar.gz"

    download_file "$download_url" "$tar_file"

    extract_dir="$program_name-$version"
    [ -d "$extract_dir" ] && rm -rf "$extract_dir"

    mkdir -p "$extract_dir"
    if ! tar -zxf "$tar_file" -C "$extract_dir" --strip-components 1; then
        printf "%s\n\n" 'Failed to extract the archive. Exiting.'
        exit 1
    fi

    cd "$extract_dir" || exit 1
    printf "%s\n\n" 'Building the kernel...'
    if ! build_kernel_with_progress; then
        return 1
    fi

    # Check for vmlinux file and move it to $PWD
    find_vmlinux="$(find $PWD -type f -name 'vmlinux' | head -n1)"
    if [ -f "$find_vmlinux" ]; then
        mv "$find_vmlinux" "$script_dir/vmlinux"
        printf "%s\n\n" 'Kernel build successful. vmlinux moved to the script directory.'

        read -p "Do you want to delete the build directory? (y/n): " user_choice
        if [ "$user_choice" = "y" ]; then
            rm -fr "$cwd"
            printf "%s\n\n" 'Build directory cleaned up.'
        else
            printf "%s\n\n" 'Build directory retained as per user choice.'
        fi
    else
        printf "%s\n" 'Error: vmlinux file not found. Please check the build process.'
        return 1
    fi
}

# Main script execution
get_latest_release_version
if ! install_kernel; then
    if [ -s "$error_log" ]; then
        printf "%s\n" "Errors were encountered during the build process. Error log is available at $error_log."
        read -p "Do you want to view the error log? (y/n): " view_choice
        if [ "$view_choice" = "y" ]; then
            cat "$error_log"
        fi
    fi
fi

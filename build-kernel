#!/usr/bin/env bash
# shellcheck disable=SC2162,SC2317

#####################################################################################################
##
##  GitHub Script: https://github.com/slyfox1186/wsl2-kernel-build-script/blob/main/build-kernel
##
##  Purpose: Build Official WSL2 Kernels
##
##  Updated: 01.09.24
##
##  Script version: 2.5
##
#####################################################################################################

clear

if [ "${EUID}" -eq '0' ]; then
    printf "%s\n\n" 'You must run this script WITHOUT root/sudo.'
    exit 1
fi

# Define the program name and an output directory
program_name='wsl2-kernel'
script_dir="$PWD"
cwd="$script_dir/$program_name-build-script"

# Create and change to the build directory
mkdir -p "$cwd"
cd "$cwd" || exit 1

# Set compiler optimizations
CC='gcc'
CXX='g++'
CFLAGS='-g -O3 -march=native'
CXXFLAGS="$CFLAGS"

export CC CXX CFLAGS CXXFLAGS

is_aria2c_installed()
{
    command -v aria2c > /dev/null 2>&1
    return $?
}

get_latest_release_version()
{
    latest_release_tag=$(curl -s 'https://github.com/microsoft/WSL2-Linux-Kernel/tags' | grep -oP 'href="/microsoft/WSL2-Linux-Kernel/releases/tag/\K[^"]+' | head -1)
    echo "$latest_release_tag"
}

download_file()
{
    url=$1
    output_file=$2

    if is_aria2c_installed; then
        echo 'Downloading with aria2c...'
        aria2c -x 16 -s 16 -o "$output_file" "$url"
    else
        echo 'Downloading with wget...'
        wget --show-progress -cqO "$output_file" "$url"
    fi
}

install_required_packages()
{
    packages=(dwarves libelf-dev libssl-dev build-essential flex bison
              libncurses-dev libncurses5 libncursesw5 libncursesw5-dev
              pkg-config)
    missing_packages=()

    for pkg in "${packages[@]}"
    do
        if ! dpkg -l | grep -qw "$pkg"; then
            missing_packages+=("$pkg")
        fi
    done

    if [ ${#missing_packages[@]} -ne 0 ]; then
        printf "%s\n\n" "Installing missing packages: ${missing_packages[*]}"
        sudo apt update
        sudo apt -y install "${missing_packages[@]}"
    fi
}

install_kernel()
{
    # Check if aria2c is installed 
    if is_aria2c_installed; then
        echo "aria2c is already installed."
    else
        echo "aria2c is not installed. Installing aria2c..."
        sudo apt update
        sudo apt -y install aria2
        if is_aria2c_installed; then
            echo "aria2c has been successfully installed."
        else
            echo "Failed to install aria2c. Please check for errors."
        fi
    fi

    version=$(get_latest_release_version)
    if [ -z "$version" ]; then
        printf "%s\n\n" 'Failed to find the latest version. Exiting.'
        exit 1
    fi

    tar_file="$program_name-$version.tar.gz"
    download_url="https://github.com/microsoft/WSL2-Linux-Kernel/archive/refs/tags/$version.tar.gz"

    download_file "$download_url" "$tar_file"

    extract_dir="$program_name-$version"
    [ -d "$extract_dir" ] && rm -rf "$extract_dir"

    mkdir -p "$extract_dir"
    if ! tar -zxf "$tar_file" -C "$extract_dir" --strip-components 1; then
        printf "%s\n\n" 'Failed to extract the archive. Exiting.'
        exit 1
    fi

    cd "$extract_dir" || exit 1
    printf "%s\n\n" 'Building the kernel...'
    yes '' | make "-j$(nproc --all)" KCONFIG_CONFIG='Microsoft/config-wsl'

    # Check for vmlinux file and move it to $PWD
    find_vmlinux="$(find $PWD -type f -name 'vmlinux' | head -n1)"
    if [ -f "$find_vmlinux" ]; then
        mv "$find_vmlinux" "$script_dir/vmlinux"
        printf "%s\n\n" 'Kernel build successful. vmlinux moved to the script directory.'
        # Clean up build directory
        rm -fr "$cwd"
        printf "%s\n\n" 'Build directory cleaned up.'
    else
        printf "%s\n" 'Error: vmlinux file not found. Please check the build process.'
        read -p "Do you want to delete the build directory? (y/n): " user_choice
        if [ "$user_choice" = "y" ]; then
            rm -fr "$cwd"
            printf "%s\n\n" 'Build directory cleaned up.'
        else
            printf "%s\n\n" 'Build directory retained as per user choice.'
        fi
    fi
}

# Main script execution
get_latest_release_version
install_kernel
